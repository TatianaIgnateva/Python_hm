# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется
# как произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.


class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __add__(self, other):
        return f"Слияние двух клеток дает колличество ячеек - {self.quantity + other.quantity}"

    def __sub__(self, other):
        return f"Разность колличества ячеек в клетках  - {self.quantity - other.quantity} " \
               if self.quantity > other.quantity else f"Разность колличества ячеек в клетках  - " \
                                                      f"{(self.quantity * -1) - (other.quantity * -1)}"

    def __mul__(self, other):
        return f"Произведение колличества ячеек двух клеток - {self.quantity * other.quantity}"

    def __truediv__(self, other):
        return f"Делени до целого, колличество ячеек - {self.quantity // other.quantity}"



    ''' Новенькая интересная штучка! '''

    def make_order(self, rows):
        result = ''
        for _ in range(self.quantity // rows):
            result += '*' * rows + '\n'
        result += '*' * (self.quantity % rows) + '\n'
        return result

#        return "\n".join(["*" * rows for _ in range(self.quantity // rows)]) + f"\n{'*' * (self.quantity % rows)}"



cell_1 = Cell(17)
cell_2 = Cell(3)

print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)

print(cell_1.make_order(5))
